name: "Deploy"

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  # preview:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@master
  #     - uses: chrnorm/deployment-action@releases/v1
  #       name: Create GitHub deployment
  #       id: test
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN}}
  #         description: 'Preview my app'
  #         environment: preview

  #     - uses: shallwefootball/s3-upload-action@master
  #       name: Upload S3
  #       id: S3
  #       with:
  #         aws_key_id: ${{ secrets.AWS_SECRET_ID }}
  #         aws_secret_access_key: ${{ secrets.AWS_SECRET_KEY}}
  #         aws_bucket: ${{ secrets.AWS_BUCKET }}
  #         source_dir: 'lambdas'

  #     - name: Update deployment status (success)
  #       if: success()
  #       uses: chrnorm/deployment-status@releases/v1
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         target_url: https://aws-bucket.s3.ap-northeast-2.amazonaws.com/${{steps.S3.outputs.object_key}}/index.html
  #         state: 'success'
  #         deployment_id: ${{ steps.test.outputs.deployment_id }}
  # upload:
  #     name: 'Upload lambdas to s3'
  #     runs-on: ubuntu-latest
  #     steps:
  #       - uses: actions/checkout@master
  #       - run: cd lambdas
  #       - run: cd lambdas && zip -r ../lambda.zip .
  #       - uses: shallwefootball/s3-upload-action@master
  #         with:
  #           aws_key_id: ${{ secrets.AWS_SECRET_ID }}
  #           aws_secret_access_key: ${{ secrets.AWS_SECRET_KEY }}
  #           aws_bucket: ${{ secrets.AWS_BUCKET }}
  #           source_dir: 'lambdas'
  lambda-migrate-legacy-users:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - run: cd lambdas
      - run: cd lambdas && zip -r ../lambda.zip .
      - uses: stcalica/update-lambda@0.0.2
        with:
          package: lambda.zip
          function-name: migrateFirebaseUsers
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_SECRET_ID: ${{ secrets.AWS_SECRET_ID }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  terraform:
    name: "Terraform"
    # needs: [lambda-first, lambda-second]
    needs: [lambda-migrate-legacy-users]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve
